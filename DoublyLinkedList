#include <iostream> 
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node* prev;
    
    Node(int val) {
        data = val;
        next = nullptr;
        prev = nullptr;
    }
};

class DoublyLinkedList {
private:
    Node* head;

public:
    DoublyLinkedList() {
        head = nullptr;
    }

    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (head != nullptr) {
            head->prev = newNode;
        }
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << value << " at the beginning." << endl;
    }

    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            cout << "Inserted " << value << " at the end." << endl;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
        cout << "Inserted " << value << " at the end." << endl;
    }

    void insertAtPosition(int value, int position) {
        if (position < 1) {
            cout << "Position should be 1 or greater." << endl;
            return;
        }
        if (position == 1) {
            insertAtBeginning(value);
            return;
        }

        Node* newNode = new Node(value);
        Node* temp = head;

        for (int i = 1; temp != nullptr && i < position - 1; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of bounds. Cannot insert." << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        newNode->prev = temp;

        if (temp->next != nullptr) {
            temp->next->prev = newNode;
        }

        temp->next = newNode;
        cout << "Inserted " << value << " at position " << position << "." << endl;
    }

    void deleteAtBeginning() {
        if (head == nullptr) {
            cout << "List is empty. Cannot delete." << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
        cout << "Deleted " << temp->data << " from the beginning." << endl;
        delete temp;
    }

    void deleteAtEnd() {
        if (head == nullptr) {
            cout << "List is empty. Cannot delete." << endl;
            return;
        }
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            cout << "Deleted last remaining element from the end." << endl;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->prev->next = nullptr;
        cout << "Deleted last element from the end." << endl;
        delete temp;
    }

    void deleteAtPosition(int position) {
        if (head == nullptr) {
            cout << "List is empty. Cannot delete." << endl;
            return;
        }
        if (position < 1) {
            cout << "Position should be 1 or greater." << endl;
            return;
        }
        if (position == 1) {
            deleteAtBeginning();
            return;
        }

        Node* temp = head;
        for (int i = 1; temp != nullptr && i < position - 1; i++) {
            temp = temp->next;
        }

        if (temp == nullptr || temp->next == nullptr) {
            cout << "Position out of bounds. Cannot delete." << endl;
            return;
        }

        Node* nodeToDelete = temp->next;
        temp->next = nodeToDelete->next;

        if (nodeToDelete->next != nullptr) {
            nodeToDelete->next->prev = temp;
        }

        cout << "Deleted " << nodeToDelete->data << " from position " << position << "." << endl;
        delete nodeToDelete;
    }

    void display() {
        if (head == nullptr) {
            cout << "List is empty." << endl;
            return;
        }
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " <-> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
};

int main() 
{
    DoublyLinkedList list;
    int choice, value, position;
do {
        cout << "\nMenu:\n";
        cout << "1. * INSERT HERE AT BEGINNING *\n";
        cout << "2. * INSERT HERE AT END *\n";
        cout << "3. * INSERT HERE AT SPECIFIC POSITION *\n";
        cout << "4. * DELETE HERE AT BEGINNING *\n";
        cout << "5. * DELETE HERE AT END *\n";
        cout << "6. * DELETE HERE AT SPECIFIC POSITION * \n";
        cout << "7. * DISPLAY LIST *\n";
        cout << "8. * EXIT *\n";
        cout << "ENTER CHOICE NUNDER HERE: ";
        cin >> choice;

        switch (choice)
        {
            case 1:
                cout << "Enter value to insert at beginning: ";
                cin >> value;
                list.insertAtBeginning(value);
                break;
            case 2:
                cout << "Enter value to insert at end: ";
                cin >> value;
                list.insertAtEnd(value);
                break;
            case 3:
                cout << "Enter value to insert: ";
                cin >> value;
                cout << "Enter position to insert at: ";
                cin >> position;
                list.insertAtPosition(value, position);
                break;
            case 4:
                list.deleteAtBeginning();
                break;
            case 5:
                list.deleteAtEnd();
                break;
            case 6:
                cout << "Enter position to delete from: ";
                cin >> position;
                list.deleteAtPosition(position);
                break;
            case 7:
                list.display();
                break;
            case 8:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
